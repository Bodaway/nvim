" Set this to 1 to use ultisnips for snippet handling
let s:using_snippets = 1

" Colors: {{{
augroup ColorschemePreferences
  autocmd!
  " These preferences clear some gruvbox background colours, allowing transparency
  autocmd ColorScheme * highlight Normal     ctermbg=NONE guibg=NONE
  autocmd ColorScheme * highlight SignColumn ctermbg=NONE guibg=NONE
  autocmd ColorScheme * highlight Todo       ctermbg=NONE guibg=NONE
  " Link ALE sign highlights to similar equivalents without background colours
  autocmd ColorScheme * highlight link ALEErrorSign   WarningMsg
  autocmd ColorScheme * highlight link ALEWarningSign ModeMsg
  autocmd ColorScheme * highlight link ALEInfoSign    Identifier
augroup END

" ALE: {{{
let g:ale_sign_error = 'â€¢'
let g:ale_sign_warning = 'â€¢'
let g:ale_sign_info = 'Â·'
let g:ale_sign_style_error = 'Â·'
let g:ale_sign_style_warning = 'Â·'

let g:ale_linters = { 'cs': ['OmniSharp'] }
" }}}

" Sharpenup: {{{
" All sharpenup mappings will begin with `<Space>os`, e.g. `<Space>osgd` for
" :OmniSharpGotoDefinition
let g:sharpenup_map_prefix = 'Ãª'

let g:sharpenup_codeactions=1
let g:sharpenup_codeactions_autocmd='CursorHold'
let g:sharpenup_codeactions_glyph='ðŸ’¡'
let g:sharpenup_codeactions_set_signcolumn=1

let g:sharpenup_statusline_opts = { 'Text': '%s (%p/%P)' }
let g:sharpenup_statusline_opts.Highlight = 1

augroup OmniSharpIntegrations
  autocmd!
  autocmd User OmniSharpProjectUpdated,OmniSharpReady call lightline#update()
augroup END
" }}}



" OmniSharp: {{{
autocmd FileType cs nnoremap <leader><Space> :OmniSharpGetCodeActions<CR>
autocmd FileType cs nnoremap <leader>i :OmniSharpFindImplementations<CR>
autocmd FileType cs nnoremap <leader>t :OmniSharpTypeLookup<CR>
autocmd FileType cs nnoremap <leader>f :OmniSharpCodeFormat<CR>

set completeopt=menuone,noinsert,noselect,preview
let g:asyncomplete_auto_popup = 0
let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_force_refresh_on_context_changed = 1
let g:omnicomplete_fetch_full_documentation = 1

let g:OmniSharp_server_use_net6 = 1
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_highlight_types = 2
let g:OmniSharp_typeLookupInPreview = 1

"let g:OmniSharp_popup_position = 'peek'
"if has('nvim')
  "let g:OmniSharp_popup_options = {
  "\ 'winhl': 'Normal:NormalFloat'
  "\}
"else
  "let g:OmniSharp_popup_options = {
  "\ 'highlight': 'Normal',
  "\ 'padding': [0, 0, 0, 0],
  "\ 'border': [1]
  "\}
"endif
"let g:OmniSharp_popup_mappings = {
"\ 'sigNext': '<C-n>',
"\ 'sigPrev': '<C-p>',
"\ 'pageDown': ['<C-f>', '<PageDown>'],
"\ 'pageUp': ['<C-b>', '<PageUp>']
"\}

if s:using_snippets
  let g:OmniSharp_want_snippet = 1
endif

let g:OmniSharp_highlight_groups = {
\ 'ExcludedCode': 'NonText'
\}
" }}}